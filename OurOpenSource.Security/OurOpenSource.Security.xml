<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OurOpenSource.Security</name>
    </assembly>
    <members>
        <member name="T:OurOpenSource.Security.Cryptography.GuidManager">
            <summary>
            GUID管理器。
            GUID manager.
            </summary>
        </member>
        <member name="P:OurOpenSource.Security.Cryptography.GuidManager.Guids">
            <summary>
            GUID管理器中所有的GUID。
            All GUIDs in GUID Manager.
            </summary>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.GuidManager.GetOne">
            <summary>
            获取一个真正唯一的Guid。
            Get a real unique GUID.
            </summary>
            <returns>
            一个真正唯一的Guid。
            A real unique GUID.
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.GuidManager.Remove(System.Guid)">
            <summary>
            从GUID管理器中删除一个GUID。
            Delete a GUID from GUID manager.
            </summary>
            <param name="guid">
            你想要删除的GUID。
            The GUID which you want to delete.
            </param>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.GuidManager.Contains(System.Guid)">
            <summary>
            判断GUID管理器中是否包含指定的GUID。
            Whether the specified GUID is included in the guid manager.
            </summary>
            <param name="guid">
            一个你想要的判断是否存在与GUID管理器中的GUID。
            A guid which you want to make sure is it is contained in GUID manager.
            </param>
            <returns>
            GUID管理器中是否包含指定的GUID。
            Whether the specified GUID is included in the guid manager.
            </returns>
        </member>
        <member name="P:OurOpenSource.Security.Cryptography.GuidManager.Count">
            <summary>
            获取当前GUID管理器中GUID的数量。
            Get the count of GUID in this GUID manager.
            </summary>
        </member>
        <member name="T:OurOpenSource.Security.Cryptography.ICryptography">
            <summary>
            加密算法。
            Cryptography.
            </summary>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.ICryptography.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            加密。
            Do encrypt.
            </summary>
            <param name="data">
            需要被加密的数据。
            The data need to encrypt.
            </param>
            <param name="password">
            用于加密的密码。
            The password for encrypt.
            </param>
            <returns>
            加密后的数据。
            Encrypted data.
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.ICryptography.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            解密。
            Do decrypt.
            </summary>
            <param name="encryptedData">
            需要被解密的数据。
            The data need to decrypt.
            </param>
            <param name="password">
            用于解密的密码
            The password for decrypt.
            </param>
            <returns>
            解密后的数据。
            Decrypted data.
            </returns>
        </member>
        <member name="T:OurOpenSource.Security.Cryptography.IRandomMethod">
            <summary>
            生成随机数的方法。
            Method of generating random number.
            </summary>
        </member>
        <member name="P:OurOpenSource.Security.Cryptography.IRandomMethod.SeedNeedLength">
            <summary>
            种子字节数。
            Seed bytes.
            如果不需要则设置为`0`。
            `0` means unnecessary.
            </summary>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.IRandomMethod.SetSeed(System.Byte[])">
            <summary>
            设置种子。
            Set seed
            </summary>
            <param name="seed">
            随机数种子。
            seed of random.
            </param>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.IRandomMethod.GetInt(System.Int32,System.Int32)">
            <summary>
            获取一个随机的整形。
            Get one random `Int32` number.
            </summary>
            <param name="minValue">
            最小值。
            Min value.
            </param>
            <param name="maxValue">
            最大值。
            Max value.
            </param>
            <returns>
            一个随机的整形。
            One random `Int32` number.
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.IRandomMethod.GetBytes(System.Int32,System.Byte,System.Byte)">
            <summary>
            获取一个随机的字节数组。
            Get one random bytes array.
            </summary>
            <param name="n">
            字节数。
            bytes number.
            </param>
            <param name="minValue">
            最小值。
            Min value.
            </param>
            <param name="maxValue">
            最大值。
            Max value.
            </param>
            <returns>
            一个随机的字节数组。
            one random bytes array.
            </returns>
        </member>
        <member name="T:OurOpenSource.Security.Cryptography.RandomMethod_Guid">
            <summary>
            利用`System.Guid`生成随机数的方法。
            Method of using `System.Guid` generate random number.
            </summary>
        </member>
        <member name="P:OurOpenSource.Security.Cryptography.RandomMethod_Guid.SeedNeedLength">
            <summary>
            种子字节数。
            Seed bytes.
            </summary>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.RandomMethod_Guid.SetSeed(System.Byte[])">
            <summary>
            设置种子。
            Set seed
            </summary>
            <param name="seed">
            随机数种子。
            seed of random.
            </param>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.RandomMethod_Guid.GetInt(System.Int32,System.Int32)">
            <summary>
            获取一个随机的整形。
            Get one random `Int32` number.
            </summary>
            <param name="minValue">
            最小值。
            Min value.
            </param>
            <param name="maxValue">
            最大值。
            Max value.
            </param>
            <returns>
            一个随机的整形(Int32.MinValue~Int32.MaxValue)。
            One random `Int32` number(Int32.MinValue~Int32.MaxValue).
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.RandomMethod_Guid.#ctor">
            <summary>
            构造RandomMethod_Guid。
            Construct RandomMethod_Guid.
            </summary>
        </member>
        <member name="T:OurOpenSource.Security.Cryptography.RandomMethod_Random">
            <summary>
            利用`System.Random`生成随机数的方法。
            Method of using `System.Random` generate random number.
            </summary>
        </member>
        <member name="F:OurOpenSource.Security.Cryptography.RandomMethod_Random.random">
            <summary>
            随机数。
            Random.
            </summary>
        </member>
        <member name="P:OurOpenSource.Security.Cryptography.RandomMethod_Random.SeedNeedLength">
            <summary>
            种子字节数。
            Seed bytes.
            </summary>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.RandomMethod_Random.SetSeed(System.Byte[])">
            <summary>
            设置种子。
            Set seed
            </summary>
            <param name="seed">
            随机数种子。
            seed of random.
            </param>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.RandomMethod_Random.SetSeed(System.Int32)">
            <summary>
            设置种子。
            Set seed
            </summary>
            <param name="seed">
            随机数种子。
            seed of random.
            </param>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.RandomMethod_Random.GetInt(System.Int32,System.Int32)">
            <summary>
            获取一个随机的整形。
            Get one random `Int32` number.
            </summary>
            <param name="minValue">
            最小值。
            Min value.
            </param>
            <param name="maxValue">
            最大值。
            Max value.
            </param>
            <returns>
            一个随机的整形(0~Int32.MaxValue)。
            One random `Int32` number(0~Int32.MaxValue).
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.RandomMethod_Random.#ctor">
            <summary>
            构造默认RandomMethod_Random。
            Construct default RandomMethod_Random.
            </summary>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.RandomMethod_Random.#ctor(System.Int32)">
            <summary>
            用随机数种子构造RandomMethod_Random。
            Construct RandomMethod_Random with seed.
            </summary>
            <param name="seed"></param>
        </member>
        <member name="T:OurOpenSource.Security.Cryptography.RandomMethod_RNGCryptoServiceProvider">
            <summary>
            利用`System.Security.Cryptography.RNGCryptoServiceProvider`生成随机数的方法。
            Method of using `System.Security.Cryptography.RNGCryptoServiceProvider` generate random number.
            </summary>
        </member>
        <member name="F:OurOpenSource.Security.Cryptography.RandomMethod_RNGCryptoServiceProvider.rngCryptoServiceProvider">
            <summary>
            RNG Crypto Service Provider。
            RNG Crypto Service Provider.
            </summary>
        </member>
        <member name="P:OurOpenSource.Security.Cryptography.RandomMethod_RNGCryptoServiceProvider.SeedNeedLength">
            <summary>
            种子字节数。
            Seed bytes.
            </summary>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.RandomMethod_RNGCryptoServiceProvider.SetSeed(System.Byte[])">
            <summary>
            设置种子。
            Set seed
            </summary>
            <param name="seed">
            随机数种子。
            seed of random.
            </param>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.RandomMethod_RNGCryptoServiceProvider.GetInt(System.Int32,System.Int32)">
            <summary>
            获取一个随机的整形。
            Get one random `Int32` number.
            </summary>
            <param name="minValue">
            最小值。
            Min value.
            </param>
            <param name="maxValue">
            最大值。
            Max value.
            </param>
            <returns>
            一个随机的整形(Int32.MinValue~Int32.MaxValue)。
            One random `Int32` number(Int32.MinValue~Int32.MaxValue).
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.RandomMethod_RNGCryptoServiceProvider.GetBytes(System.Int32,System.Byte,System.Byte)">
            <summary>
            获取一个随机的字节数组。
            Get one random bytes array.
            </summary>
            <param name="n">
            字节数。
            bytes number.
            </param>
            <param name="minValue">
            最小值。
            Min value.
            </param>
            <param name="maxValue">
            最大值。
            Max value.
            </param>
            <returns>
            一个随机的字节数组。
            one random bytes array.
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.RandomMethod_RNGCryptoServiceProvider.#ctor">
            <summary>
            构造RandomMethod_RNGCryptoServiceProvider。
            Construct RandomMethod_RNGCryptoServiceProvider.
            </summary>
        </member>
        <member name="T:OurOpenSource.Security.Cryptography.Rijndael">
            <summary>
            Rijndael（AES）算法。
            Rijndael(AES)Cryptography.
            </summary>
        </member>
        <member name="F:OurOpenSource.Security.Cryptography.Rijndael.sha256">
            <summary>
            SHA256。
            SHA256.
            </summary>
        </member>
        <member name="F:OurOpenSource.Security.Cryptography.Rijndael.d_vi">
            <summary>
            默认密钥向量。
            Default VI.
            </summary>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.Rijndael.EncryptString(System.String,System.Byte[])">
            <summary>
            加密字符串。
            Encrypt string.
            </summary>
            <param name="plainText">
            明文字符串。
            Plain text.
            </param>
            <param name="pswdBytes">
            密钥。
            Password.
            </param>
            <returns>
            加密后的密文。
            Encrypted cipher text.
            </returns>
            <remarks>
            注意，实际使用的是`pswdBytes`的SHA256哈希值。
            Caution, in fact, it use SHA256 hash code of `pswdBytes` instead of `pswdBytes`.
            默认使用`System.Text.Encoding.UTF8`作为解码器。
            Use `System.Text.Encoding.UTF8` as default encoder.
            </remarks>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.Rijndael.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            加密数据。
            Encrypt data.
            </summary>
            <param name="plainData">
            明文数据。
            Plain data.
            </param>
            <param name="pswdBytes">
            密钥。
            Password.
            </param>
            <returns>
            加密后的数据。
            Encrypted data.
            </returns>
            <remarks>
            注意，实际使用的是`pswdBytes`的SHA256哈希值。
            Caution, in fact, it use SHA256 hash code of `pswdBytes` instead of `pswdBytes`.
            </remarks>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.Rijndael.DecryptString(System.Byte[],System.Byte[])">
            <summary>
            解密字符串。
            Decrypt string.
            </summary>
            <param name="cipherText">
            密文。
            Cipher text.
            </param>
            <param name="pswdBytes">
            密钥。
            Password.
            </param>
            <returns>
            解密后的密文。
            Decrypted cipher text.
            </returns>
            <remarks>
            注意，实际使用的是`pswdBytes`的SHA256哈希值。
            Caution, in fact, it use SHA256 hash code of `pswdBytes` instead of `pswdBytes`.
            默认使用`System.Text.Encoding.UTF8`作为解码器。
            Use `System.Text.Encoding.UTF8` as default encoder.
            </remarks>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.Rijndael.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            解密数据。
            Decrypt data.
            </summary>
            <param name="cipherData">
            密文数据。
            Cipher data.
            </param>
            <param name="pswdBytes">
            密钥。
            Password.
            </param>
            <returns>
            解密后的明文数据。
            Decrypted plain data.
            </returns>
            <remarks>
            注意，实际使用的是`pswdBytes`的SHA256哈希值。
            Caution, in fact, it use SHA256 hash code of `pswdBytes` instead of `pswdBytes`.
            </remarks>
        </member>
        <member name="M:OurOpenSource.Security.Cryptography.Rijndael.ProcessPassword(System.Byte[])">
            <summary>
            获取密码的SHA256哈希值。
            Get SHA256 hash code of password.
            </summary>
            <param name="password">
            密码。
            Password.
            </param>
            <returns>
            密码的SHA256哈希值。
            SHA256 hash code of password.
            </returns>
        </member>
        <member name="T:OurOpenSource.Security.SecretData">
            <summary>
            秘密数据。
            Secret data.
            </summary>
            <remarks>
            只具有保密性，不能保护数据完整性。
            It only has confidentiality and cannot protect data integrity.
            </remarks>
        </member>
        <member name="F:OurOpenSource.Security.SecretData.data">
            <summary>
            加密的数据。
            Encrypted data.
            </summary>
            <remarks>
            结构：     |   随机数据长度   |  真实数据长度  |[      乱序的随机数据位置       ]|[   真实数据与随机数据   ]|
            Structure: |Random data length|Real data length|[Disorderly random data position]|[Real data &amp; random data ]|
            </remarks>
        </member>
        <member name="P:OurOpenSource.Security.SecretData.EncryptedData">
            <summary>
            加密的数据。
            Encrypted data.
            </summary>
            <remarks>
            结构：     |   随机数据长度   |  真实数据长度  |[      乱序的随机数据位置       ]|[   真实数据与随机数据   ]|
            Structure: |Random data length|Real data length|[Disorderly random data position]|[Real data &amp; random data ]|
            </remarks>
        </member>
        <member name="M:OurOpenSource.Security.SecretData.GetData(System.Byte[])">
            <summary>
            解密数据。
            Decrypt data.
            </summary>
            <param name="password">
            密码。
            Password.
            </param>
            <returns>
            解密后的数据。
            Decrypted data.
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.SecretData.#ctor(System.Byte[],OurOpenSource.Security.Cryptography.IRandomMethod,System.Byte[],System.Int32)">
            <summary>
            初始化秘密数据。
            Initialize secret string.
            </summary>
            <param name="plainData">
            需要加密的明文字符串。
            The plain text need to encrypt.
            </param>
            <param name="randomMethod">
            生成随机数的函数。
            Method of generate random number.
            </param>
            <param name="password">
            密码。
            Password.
            </param>
            <param name="maxRandomDataSize">
            用于加密的随机数据大小。单位是一个随机数据块，不是字节。
            Size of random data of encryption. The unit of size is one random data block, but not byte.
            </param>
        </member>
        <member name="M:OurOpenSource.Security.SecretData.#ctor">
            <summary>
            仅为了开发方便而设置的构造函数。
            Consrtuct method setted for easyily developing.
            请调用`SetData`方法来写入加密数据。
            Please call `SetData` to write secret data.
            </summary>
        </member>
        <member name="M:OurOpenSource.Security.SecretData.SetData(System.Byte[],OurOpenSource.Security.Cryptography.IRandomMethod,System.Byte[],System.Int32)">
            <summary>
            设置数据。
            Set data.
            </summary>
            <param name="plainData">
            需要加密的明文字符串。
            The plain text need to encrypt.
            </param>
            <param name="randomMethod">
            生成随机数的函数。
            Method of generate random number.
            </param>
            <param name="password">
            密码。
            Password.
            </param>
            <param name="maxRandomDataSize">
            用于加密的随机数据大小。单位是一个随机数据块，不是字节。
            Size of random data of encryption. The unit of size is one random data block, but not byte.
            </param>
        </member>
        <member name="M:OurOpenSource.Security.SecretData.GetRandomLong(OurOpenSource.Security.Cryptography.IRandomMethod,System.Int64,System.Int64)">
            <summary>
            获取一个随机的`长整型`数值。
            Get a random `long` value.
            </summary>
            <param name="randomMethod">
            生成随机数的函数。
            Method of generate random number.
            </param>
            <param name="minValue">
            最小值。
            Min value.
            </param>
            <param name="maxValue">
            最大值。
            Max value.
            </param>
            <returns>
            一个随机的`长整型`数值。
            A random `long` value.
            </returns>
            <remarks>
            不检查min是否小于max。
            Won't check whether is min &lt; max.
            </remarks>
        </member>
        <member name="T:OurOpenSource.Security.SecretString">
            <summary>
            秘密字符串。
            Secret string.
            </summary>
            <remarks>
            只具有保密性，不能保护数据完整性。
            It only has confidentiality and cannot protect data integrity.
            </remarks>
        </member>
        <member name="M:OurOpenSource.Security.SecretString.GetData(System.Byte[])">
            <summary>
            解密字符串。
            Decrypt string.
            </summary>
            <param name="password">
            密码。
            Password.
            </param>
            <returns>
            解密后的字符串。
            Decrypted string.
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.SecretString.GetData(System.Byte[],System.Text.Encoding)">
            <summary>
            解密并用指定解码器获取字符串。
            Decrypt and encoding string with designative encoder.
            </summary>
            <param name="password">
            密码。
            Password.
            </param>
            <param name="encoding">
            指定的解码器
            Designative encoder.
            </param>
            <returns>
            解密后的字符串。
            Decrypted string.
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.SecretString.#ctor(System.String,OurOpenSource.Security.Cryptography.IRandomMethod,System.Byte[],System.Int32)">
            <summary>
            初始化秘密字符串。
            Initialize secret string.
            </summary>
            <param name="plainText">
            需要加密的明文字符串。
            The plain text need to encrypt.
            </param>
            <param name="randomMethod">
            生成随机数的函数。
            Method of generate random number.
            </param>
            <param name="password">
            密码。
            Password.
            </param>
            <param name="maxRandomDataSize">
            用于加密的随机数据大小。单位是一个随机数据块，不是字节。
            Size of random data of encryption. The unit of size is one random data block, but not byte.
            </param>
        </member>
        <member name="M:OurOpenSource.Security.SecretString.#ctor(System.String,System.Text.Encoding,OurOpenSource.Security.Cryptography.IRandomMethod,System.Byte[],System.Int32)">
            <summary>
            用指定的解码器初始化秘密字符串。
            Initialize secret string with designative encoder.
            </summary>
            <param name="plainText">
            需要加密的明文字符串。
            The plain text need to encrypt.
            </param>
            <param name="encoding">
            字符串的解码器。
            Encoder of string.
            </param>
            <param name="randomMethod">
            生成随机数的函数。
            Method of generate random number.
            </param>
            <param name="password">
            密码。
            Password.
            </param>
            <param name="maxRandomDataSize">
            用于加密的随机数据大小。单位是一个随机数据块，不是字节。
            Size of random data of encryption. The unit of size is one random data block, but not byte.
            </param>
        </member>
        <member name="T:OurOpenSource.Security.UniqueDevice.IUniqueDevice">
            <summary>
            设备唯一标识。
            Unique device identifier.
            </summary>
        </member>
        <member name="P:OurOpenSource.Security.UniqueDevice.IUniqueDevice.InfoType">
            <summary>
            获取设备（唯一）信息类型名称。
            Get unique device informationtype.
            </summary>
        </member>
        <member name="P:OurOpenSource.Security.UniqueDevice.IUniqueDevice.Infos">
            <summary>
            获取所有信息。
            Get all information.
            </summary>
        </member>
        <member name="M:OurOpenSource.Security.UniqueDevice.IUniqueDevice.ToByteArray">
            <summary>
            将本IUniqueDevice转化为字节流。
            Convert this instance to bytes stream.
            </summary>
            <returns>
            转化后的字节流。
            Converted bytes stream.
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.UniqueDevice.IUniqueDevice.ToUniqueDevice``1(System.Byte[])">
            <summary>
            将字节流转换为为`T`。
            Convert bytes stream to type `T`.
            </summary>
            <typeparam name="T">
            目标`IUniqueDevice`类型。
            Target type `IUniqueDevice`。
            </typeparam>
            <param name="bytes">
            由`IUniqueDevice`转化来的字节流。
            A bytes stream convert form an `IUniqueDevice`.
            </param>
            <returns>
            被还原的`IUniqueDevice`。
            Converted `IUniqueDevice`.
            </returns>
            <remarks>
            `T`通常只能为该实例的真实类型。
            Usually, `T` can only be actually type of this instance.
            如，对于`WindowsDeviceV1`，`T`只能是`WindowsDeviceV1`，即`WindowsDeviceV1.ToUniqueDevice&lt;WindowsDeviceV1&gt;(aByteStreamConvertFormWindowsDeviceV1)`。
            For example, To `WindowsDeviceV1`, `T` can only be `WindowsDeviceV1`, that is `WindowsDeviceV1.ToUniqueDevice&lt;WindowsDeviceV1&gt;(aByteStreamConvertFormWindowsDeviceV1)`.
            </remarks>
        </member>
        <member name="T:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1">
            <summary>
            通用Windows设备唯一标识，版本：1。
            General Widnows unique device identifier, version: 1.
            </summary>
        </member>
        <member name="P:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.InfoType">
            <summary>
            获取设备（唯一）信息类型名称。
            Get unique device informationtype.
            </summary>
        </member>
        <member name="F:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.KeyName_HostName">
            <summary>
            主机名称的键名。
            Key of host name.
            </summary>
        </member>
        <member name="F:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.KeyName_SMBIOSUUID">
            <summary>
            SMBIOS UUID的键名。
            Key of SMBIOS UUID.
            </summary>
        </member>
        <member name="F:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.KeyName_MachineGuid">
            <summary>
            Machine GUID的键名。
            Key of Machine GUID.
            </summary>
        </member>
        <member name="F:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.KeyName_MACAddressesHashCode">
            <summary>
            MAC地址哈希值的键名。
            Key of MAC address hash code.
            </summary>
        </member>
        <member name="F:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.KeyName_ProductId">
            <summary>
            Product ID的键名。
            Key of host Product ID.
            </summary>
        </member>
        <member name="F:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.KeyName_CPUProcessorIDsHashCode">
            <summary>
            CPU Processor ID哈希值的键名。
            Key of CPU Processor ID hash code.
            </summary>
        </member>
        <member name="F:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.DefaultKey_IPAddress">
            <summary>
            IP地址的键名。
            Key of IP address.
            </summary>
        </member>
        <member name="F:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.infos">
            <summary>
            设备唯一标识信息。
            Unique machine identifier infomation.
            </summary>
        </member>
        <member name="P:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.Infos">
            <summary>
            设备唯一标识信息。
            Unique machine identifier infomation.
            </summary>
        </member>
        <member name="M:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.ToByteArray">
            <summary>
            将本IUniqueDevice转化为字节流。
            Convert this instance to bytes stream.
            </summary>
            <returns>
            转化后的字节流。
            Converted bytes stream.
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.ToUniqueDevice``1(System.Byte[])">
            <summary>
            将字节流转换为为`WindowsDeviceV1`。
            Convert bytes stream to type `WindowsDeviceV1`.
            </summary>
            <typeparam name="T">
            仅能为`WindowsDeviceV1`。
            It only can be `WindowsDeviceV1`。
            </typeparam>
            <param name="bytes">
            由`WindowsDeviceV1`转化来的字节流。
            A bytes stream convert form an `WindowsDeviceV1`.
            </param>
            <returns>
            被还原的`WindowsDeviceV1`。
            Converted `WindowsDeviceV1`.
            </returns>
        </member>
        <member name="F:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.jsonSerializerSettings">
            <summary>
            JSON序列化设置。
            JSON Serializer Settings.
            </summary>
        </member>
        <member name="T:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.WinMachineInfo">
            <summary>
            用于存储通用Windows设备唯一标识信息的容器。
            Container of stroing general Widnows unique device identifier information.
            </summary>
        </member>
        <member name="F:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.WinMachineInfo.hostName">
            <summary>
            主机名。
            Host name.
            </summary>
        </member>
        <member name="F:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.WinMachineInfo.smBIOSUUID">
            <summary>
            SMBIOS UUID。
            SMBIOS UUID.
            </summary>
        </member>
        <member name="F:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.WinMachineInfo.machineGUID">
            <summary>
            Windows的MachineGUID。
            Windows' Machine GUID.
            </summary>
        </member>
        <member name="F:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.WinMachineInfo.cpuProcessorIDsHashCode">
            <summary>
            把所有CPU ProcessorID按升序排序后的字符串连后的Hash值。
            The hash value after concatenating the strings sorted by all CPU Processor IDs in ascending order.
            </summary>
            /// <remarks>
            同一批次的CPU的CPU Processor ID可能一样。
            The CPU Processor ID of the same batch of CPUs maybe is same.
            </remarks>
        </member>
        <member name="F:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.WinMachineInfo.productID">
            <summary>
            Windows的Product ID。
            Windows' Product ID.
            </summary>
            <remarks>
            非重要值。
            Unimportant value.
            </remarks>
        </member>
        <member name="F:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.WinMachineInfo.macAddressesHashCode">
            <summary>
            把所有网卡MAC地址按升序排序后的字符串连后的Hash值。
            The hash value after concatenating the strings sorted by all MAC addresses in ascending order.
            </summary>
        </member>
        <member name="F:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.WinMachineInfo.ipAddress">
            <summary>
            IP地址。
            IP address.
            </summary>
            <remarks>
            仅由服务器获取并记录。
            Get and record by server.
            </remarks>
        </member>
        <member name="F:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.winMachineInfo">
            <summary>
            通用Windows设备唯一标识信息。
            General Widnows unique device identifier information.
            </summary>
        </member>
        <member name="P:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1._WinMachineInfo">
            <summary>
            通用Windows设备唯一标识信息。
            General Widnows unique device identifier information.
            </summary>
        </member>
        <member name="M:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.Create">
            <summary>
            获取通用Windows设备唯一标识信息。
            Get general Widnows unique device identifier information.
            </summary>
            <returns>
            通用Windows设备唯一标识信息。
            General Widnows unique device identifier information.
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.GetHostName">
            <summary>
            获取本机的主机名。
            Get localhost.
            </summary>
            <returns>
            本机的主机名。
            localhost.
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.GetSMBIOSUUID">
            <summary>
            获取本机的SMBIOS UUID。
            Get localhost SMBIOS UUID.
            </summary>
            <returns>
            本机的SMBIOS UUID。
            localhost SMBIOS UUID.
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.GetMachineGUID">
            <summary>
            获取本机的Machine GUID。
            Get localhost Machine GUID.
            </summary>
            <returns>
            本机的Machine GUID。
            localhost Machine GUID.
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.CheckMacAddress(System.String)">
            <summary>
             检查MAC字符串格式是否正确。
             Check is MAC address string format correct.
            </summary>
            <returns>
             MAC字符串格式是否正确。
             Is MAC address string format correct.
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.GetMacAddresses">
            <summary>
             通过WMI读取系统信息里的网卡MAC。
             Read the network card MAC in the system information through WMI.
            </summary>
            <returns>
             MAC地址。
             MAC Addresses.
            </returns>
            <remarks>
             不可靠。
             Unreliable.
            </remarks>
        </member>
        <member name="M:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.CheckMacAddressesHashCode(System.Byte[])">
            <summary>
             检查MAC地址的哈希值长度是否正确。
             Check is MAC addresses hash code length correct.
            </summary>
            <returns>
             MAC地址的哈希值长度是否正确。
             Is MAC addresses hash code length correct.
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.GetProductID">
            <summary>
            获取本机的Product ID。
            Get localhost Product ID.
            </summary>
            <returns>
            本机的Product ID。
            localhost Product ID.
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.CheckProductID(System.String)">
            <summary>
             检查Product ID字符串格式是否正确。
             Check is Product ID string format correct.
            </summary>
            <returns>
             Product ID字符串格式是否正确。
             Is Product ID string format correct.
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.GetCPUProcessorIDs">
            <summary>
            获取本机的CPUProcessorID。
            Get localhost CPUProcessorIDs.
            </summary>
            <returns>
            本机的CPUProcessorID。
            localhost CPUProcessorIDs.
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.CheckCpuProcessorIDsHashCode(System.Byte[])">
            <summary>
             检查CPUProcessorID的哈希值长度是否正确。
             Check is CPUProcessorIDs hash code length correct.
            </summary>
            <returns>
             CPUProcessorID的哈希值长度是否正确。
             Is CPUProcessorIDs hash code length correct.
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.GetStringsHashCode(System.String[])">
            <summary>
            获取字符串数组的哈希值。
            Get string array's hash code.
            </summary>
            <param name="strings">
            被计算哈希值的字符串数组。
            A string array need to calculate hash code.
            </param>
            <returns>
            字符串数组的哈希值。
            String array's hash code.
            </returns>
        </member>
        <member name="M:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.InitialiseWinMachineV1(System.String,System.Guid,System.Guid,System.Byte[],System.String,System.Byte[],System.Net.IPAddress)">
            <summary>
            初始化通用Windows设备唯一标识。
            Initialise General Widnows unique device identifier.
            </summary>
            <param name="hostName">
            主机名。
            Host name.
            </param>
            <param name="smBIOSUUID">
            SMBIOS UUID。
            SMBIOS UUID.
            </param>
            <param name="machineGUID">
            Windows的MachineGUID。
            Windows' Machine GUID.
            </param>
            <param name="macAddressesHashCode">
            把所有网卡MAC地址按升序排序后的字符串连后的Hash值。
            The hash value after concatenating the strings sorted by all MAC addresses in ascending order.
            </param>
            <param name="productID">
            Windows的Product ID。
            Windows' Product ID.
            </param>
            <param name="cpuProcessorIDsHashCode">
            把所有CPU ProcessorID按升序排序后的字符串连后的Hash值。
            The hash value after concatenating the strings sorted by all CPU Processor IDs in ascending order.
            </param>
            <param name="ipAddress">
            IP地址。
            IP address.
            </param>
        </member>
        <member name="M:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.#ctor(System.String,System.Guid,System.Guid,System.Byte[],System.String,System.Byte[],System.Net.IPAddress)">
            <summary>
            初始化通用Windows设备唯一标识。
            Initialise General Widnows unique device identifier.
            </summary>
            <param name="hostName">
            主机名。
            Host name.
            </param>
            <param name="smBIOSUUID">
            SMBIOS UUID。
            SMBIOS UUID.
            </param>
            <param name="machineGUID">
            Windows的MachineGUID。
            Windows' Machine GUID.
            </param>
            <param name="macAddressesHashCode">
            把所有网卡MAC地址按升序排序后的字符串连后的Hash值。
            The hash value after concatenating the strings sorted by all MAC addresses in ascending order.
            </param>
            <param name="productID">
            Windows的Product ID。
            Windows' Product ID.
            </param>
            <param name="cpuProcessorIDsHashCode">
            把所有CPU ProcessorID按升序排序后的字符串连后的Hash值。
            The hash value after concatenating the strings sorted by all CPU Processor IDs in ascending order.
            </param>
            <param name="ipAddress">
            IP地址。
            IP address.
            </param>
        </member>
        <member name="M:OurOpenSource.Security.UniqueDevice.WindowsDeviceV1.#ctor(System.Byte[])">
            <summary>
            初始化通用Windows设备唯一标识。
            Initialise General Widnows unique device identifier.
            </summary>
            <param name="bytes">
            由`WindowsDeviceV1`转化来的字节流。
            A bytes stream convert form an `WindowsDeviceV1`.
            </param>
        </member>
    </members>
</doc>
